"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.waitForExpect = exports.expectIdempotency = exports.mockMessageStore = exports.serialPromises = exports.setupMessageStore = exports.getStreamMessages = exports.pushMessage = void 0;
var uuid_1 = require("uuid");
var lodash_1 = require("lodash");
var wait_for_expect_1 = __importDefault(require("wait-for-expect"));
exports.waitForExpect = wait_for_expect_1["default"];
var messages = {};
var globalPosition = 0;
function pushMessage(message) {
    var _a, _b;
    var stream_name = message.stream_name;
    var prev = (_a = messages[stream_name]) !== null && _a !== void 0 ? _a : [];
    var nextMessage = __assign(__assign({}, message), { time: (_b = message.time) !== null && _b !== void 0 ? _b : new Date(), id: uuid_1.v4(), global_position: globalPosition++, position: prev.length });
    messages[stream_name] = __spreadArrays(prev, [nextMessage]);
    return {
        globalPosition: nextMessage.global_position,
        position: nextMessage.position,
        time: nextMessage.time,
        streamName: stream_name
    };
}
exports.pushMessage = pushMessage;
function isCategoryStream(streamName) {
    return streamName.indexOf("-") < 0;
}
function isCommandStream(streamName) {
    return streamName.indexOf(":command") >= 0;
}
function hasSameStreamName(a, b) {
    return a === b || a.startsWith(b + "-") || a.startsWith(b + ":");
}
function getStreamMessages(streamName) {
    var _a;
    var isCategory = isCategoryStream(streamName);
    var isCommand = isCommandStream(streamName);
    if (isCategory) {
        var streams = Object.keys(messages).filter(function (stream) {
            if (!hasSameStreamName(stream, streamName)) {
                return false;
            }
            if (isCommand) {
                return isCommandStream(stream);
            }
            else {
                return !isCommandStream(stream);
            }
        });
        return lodash_1.sortBy(lodash_1.flatten(lodash_1.map(streams, function (k) { return messages[k]; })), [
            "global_position",
        ]);
    }
    else {
        return (_a = messages[streamName]) !== null && _a !== void 0 ? _a : [];
    }
}
exports.getStreamMessages = getStreamMessages;
function setupMessageStore(initialMessages) {
    if (initialMessages === void 0) { initialMessages = []; }
    // Clear the message store.
    messages = {};
    initialMessages.forEach(function (msg) { return pushMessage(msg); });
}
exports.setupMessageStore = setupMessageStore;
var serialPromises = function (fns) {
    return fns.reduce(function (promise, fn) {
        return promise.then(function (results) { return fn().then(function (r) { return __spreadArrays(results, [r]); }); });
    }, Promise.resolve([]));
};
exports.serialPromises = serialPromises;
function pushSerial(queue, fn) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, queue];
                case 1:
                    _a.sent();
                    return [2 /*return*/, fn()];
            }
        });
    });
}
function mockMessageStore() {
    jest.doMock("./index", function () { return ({
        __esModule: true,
        sendCommand: function (options) {
            var _a, _b;
            var category = options.category, id = options.id;
            var fakeStreamName = category + ":command-" + id;
            var response = pushMessage(__assign(__assign({}, options), { data: (_a = options.data) !== null && _a !== void 0 ? _a : {}, metadata: (_b = options.metadata) !== null && _b !== void 0 ? _b : { traceId: uuid_1.v4() }, type: options.command, stream_name: fakeStreamName }));
            return Promise.resolve(response);
        },
        createEndpoint: function () {
            return {
                listen: function () { return null; }
            };
        },
        readMessageAtOptions: function (options) {
            return Promise.resolve(messages[options.globalPosition]);
        },
        emitEvent: function (options) {
            var _a, _b;
            var category = options.category, id = options.id;
            var fakeStreamName = category + "-" + id;
            var response = pushMessage(__assign(__assign({}, options), { data: (_a = options.data) !== null && _a !== void 0 ? _a : {}, metadata: (_b = options.metadata) !== null && _b !== void 0 ? _b : { traceId: uuid_1.v4() }, type: options.event, stream_name: fakeStreamName }));
            return Promise.resolve(response);
        },
        subscribe: function (options, handler, context) {
            var queue = Promise.resolve();
            var numberOfMessageRead = 0;
            function tick() {
                return __awaiter(this, void 0, void 0, function () {
                    var messageList, lastIndex, newMessages;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                messageList = getStreamMessages(options.streamName);
                                lastIndex = messageList.length - 1;
                                if (!(messageList.length > numberOfMessageRead)) return [3 /*break*/, 2];
                                newMessages = messageList.slice(numberOfMessageRead);
                                numberOfMessageRead += newMessages.length;
                                return [4 /*yield*/, exports.serialPromises(newMessages.map(function (msg) {
                                        return function () { return __awaiter(_this, void 0, void 0, function () {
                                            var maybePromise;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0:
                                                        maybePromise = handler(msg, context);
                                                        if (!(maybePromise != null && "then" in maybePromise)) return [3 /*break*/, 2];
                                                        return [4 /*yield*/, maybePromise];
                                                    case 1:
                                                        _a.sent();
                                                        _a.label = 2;
                                                    case 2: return [2 /*return*/];
                                                }
                                            });
                                        }); };
                                    }))];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2: return [2 /*return*/, Promise.resolve()];
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            }
            tick();
            var interval = setInterval(function () {
                queue = pushSerial(queue, tick);
            }, 150);
            return function () { return clearInterval(interval); };
        },
        combineSubscriber: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return function () {
                args.forEach(function (close) { return close(); });
            };
        },
        readLastMessage: function (options) {
            var messages = getStreamMessages(options.streamName);
            return Promise.resolve(messages.length > 0 ? messages[messages.length - 1] : null);
        },
        runProjector: function (options, reducer, initialValue) {
            var messagesList = getStreamMessages(options.streamName);
            if (options.untilPosition != null) {
                messagesList = messagesList.filter(function (f) { return f.global_position <= options.untilPosition; });
            }
            return Promise.resolve(messagesList.reduce(reducer, initialValue));
        }
    }); });
}
exports.mockMessageStore = mockMessageStore;
function expectIdempotency(run, expectation) {
    return __awaiter(this, void 0, void 0, function () {
        var stop;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, run()];
                case 1:
                    stop = _a.sent();
                    return [4 /*yield*/, wait_for_expect_1["default"](expectation)];
                case 2:
                    _a.sent();
                    stop();
                    return [4 /*yield*/, run()];
                case 3:
                    stop = _a.sent();
                    return [4 /*yield*/, wait_for_expect_1["default"](expectation)];
                case 4:
                    _a.sent();
                    stop();
                    return [2 /*return*/];
            }
        });
    });
}
exports.expectIdempotency = expectIdempotency;
// Mock the message store if running in test mode.
if (process.env.NODE_ENV === "test") {
    mockMessageStore();
}

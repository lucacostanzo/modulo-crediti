"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var test_utils_1 = require("../test_utils");
var __1 = require("..");
var wait_for_expect_1 = __importDefault(require("wait-for-expect"));
test("the mocked message store adds messages to the streams and calculate the positions", function () {
    test_utils_1.setupMessageStore([{ stream_name: "example", type: "SAY_HELLO", data: {} }]);
    test_utils_1.pushMessage({
        stream_name: "example",
        type: "SAY_HELLO",
        data: {}
    });
    test_utils_1.pushMessage({
        stream_name: "example-abc",
        type: "SAY_HELLO",
        data: {}
    });
    var messages = test_utils_1.getStreamMessages("example");
    expect(messages).toHaveLength(3);
    expect(messages[1].id).not.toBeUndefined();
    expect(messages[1].global_position).toEqual(1);
    expect(messages[1].position).toEqual(1);
    messages = test_utils_1.getStreamMessages("example-abc");
    expect(messages).toHaveLength(1);
    expect(messages[0].id).not.toBeUndefined();
    expect(messages[0].global_position).toEqual(2);
    expect(messages[0].position).toEqual(0);
});
test("the mocked message store should allow to project events", function () { return __awaiter(void 0, void 0, void 0, function () {
    function reducer(prev, next) {
        return prev + 1;
    }
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                test_utils_1.setupMessageStore([
                    { stream_name: "example", type: "SAY_HELLO", data: {} },
                    { stream_name: "example", type: "SAY_HELLO", data: {} },
                    { stream_name: "example", type: "SAY_HELLO", data: {} },
                ]);
                return [4 /*yield*/, __1.runProjector({ streamName: "example" }, reducer, 0)];
            case 1:
                res = _a.sent();
                expect(res).toEqual(3);
                return [2 /*return*/];
        }
    });
}); });
test("the mocked message store should allow subscription", function () { return __awaiter(void 0, void 0, void 0, function () {
    var handler, unsubscribe;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                test_utils_1.setupMessageStore([{ stream_name: "example", type: "SAY_HELLO", data: {} }]);
                handler = jest.fn();
                unsubscribe = __1.subscribe({ streamName: "example" }, handler);
                return [4 /*yield*/, wait_for_expect_1["default"](function () { return expect(handler).toBeCalledTimes(1); })];
            case 1:
                _a.sent();
                unsubscribe();
                return [2 /*return*/];
        }
    });
}); });
test("the mocked message store should support categories", function () { return __awaiter(void 0, void 0, void 0, function () {
    function reducer(prev, next) {
        return __spreadArrays(prev, [next.stream_name]);
    }
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                test_utils_1.setupMessageStore([
                    { stream_name: "example-abc", type: "SAY_HELLO", data: {} },
                    { stream_name: "example-def", type: "SAY_HELLO", data: {} },
                    { stream_name: "example-ref", type: "SAY_HELLO", data: {} },
                ]);
                return [4 /*yield*/, __1.runProjector({ streamName: "example" }, reducer, [])];
            case 1:
                result = _a.sent();
                expect(result).toHaveLength(3);
                return [2 /*return*/];
        }
    });
}); });
test("the mocked message store should wait for async service", function () { return __awaiter(void 0, void 0, void 0, function () {
    var handler, unsubscribe;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                test_utils_1.setupMessageStore([
                    {
                        stream_name: "example:command",
                        type: "SAY_HELLO_ONCE",
                        data: {},
                        metadata: {}
                    },
                    {
                        stream_name: "example:command",
                        type: "SAY_HELLO_TWICE",
                        data: {},
                        metadata: {}
                    },
                ]);
                handler = function (msg) {
                    return new Promise(function (resolve, reject) {
                        setTimeout(function () { return __awaiter(void 0, void 0, void 0, function () {
                            var prevMessage, index;
                            var _a;
                            return __generator(this, function (_b) {
                                switch (_b.label) {
                                    case 0: return [4 /*yield*/, __1.readLastMessage({ streamName: "example" })];
                                    case 1:
                                        prevMessage = _b.sent();
                                        index = ((_a = prevMessage === null || prevMessage === void 0 ? void 0 : prevMessage.data.index) !== null && _a !== void 0 ? _a : 0) + 1;
                                        return [2 /*return*/, __1.emitEvent({
                                                category: "example",
                                                event: msg.type + "_EVENT",
                                                data: { index: index }
                                            }).then(resolve)];
                                }
                            });
                        }); }, 1000);
                    });
                };
                unsubscribe = __1.subscribe({ streamName: "example:command" }, handler);
                return [4 /*yield*/, wait_for_expect_1["default"](function () {
                        var messages = test_utils_1.getStreamMessages("example");
                        expect(messages).toHaveLength(2);
                        expect(messages[0].type).toEqual("SAY_HELLO_ONCE_EVENT");
                        expect(messages[0].data.index).toEqual(1);
                        expect(messages[1].type).toEqual("SAY_HELLO_TWICE_EVENT");
                        expect(messages[1].data.index).toEqual(2);
                    })];
            case 1:
                _a.sent();
                unsubscribe();
                return [2 /*return*/];
        }
    });
}); });
it("should support async subscriber", function () { return __awaiter(void 0, void 0, void 0, function () {
    var mockFn, start, handler, unsubscribe;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                mockFn = jest.fn();
                test_utils_1.setupMessageStore([
                    {
                        stream_name: "example:abc",
                        type: "",
                        data: {},
                        metadata: {}
                    },
                    {
                        stream_name: "example:def",
                        type: "",
                        data: {},
                        metadata: {}
                    },
                ]);
                start = new Date().valueOf();
                handler = function () {
                    return new Promise(function (resolve) {
                        setTimeout(function () {
                            mockFn((new Date().valueOf() - start) / 1000);
                            resolve(true);
                        }, 1000);
                    });
                };
                unsubscribe = __1.subscribe({ streamName: "example" }, handler);
                return [4 /*yield*/, wait_for_expect_1["default"](function () {
                        expect(mockFn).toBeCalledTimes(2);
                        expect(mockFn.mock.calls[0][0]).toBeCloseTo(1, 1);
                        expect(mockFn.mock.calls[1][0]).toBeCloseTo(2, 1);
                    })];
            case 1:
                _a.sent();
                unsubscribe();
                return [2 /*return*/];
        }
    });
}); });
it("should not receive a message with same prefixes", function () { return __awaiter(void 0, void 0, void 0, function () {
    var mockFn, unsubscribe;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                mockFn = jest.fn();
                test_utils_1.setupMessageStore([
                    {
                        stream_name: "example:abc",
                        type: "",
                        data: {},
                        metadata: {}
                    },
                    {
                        stream_name: "exampleWithSuffix:def",
                        type: "",
                        data: {},
                        metadata: {}
                    },
                ]);
                unsubscribe = __1.subscribe({ streamName: "example" }, mockFn);
                return [4 /*yield*/, wait_for_expect_1["default"](function () {
                        expect(mockFn).toBeCalledTimes(1);
                    })];
            case 1:
                _a.sent();
                unsubscribe();
                return [2 /*return*/];
        }
    });
}); });

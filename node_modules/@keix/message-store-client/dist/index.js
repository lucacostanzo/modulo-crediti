"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a, _b;
exports.__esModule = true;
exports.createEndpoint = exports.getTypescriptDefinition = exports.testUtils = exports.runProjector = exports.combineSubscriber = exports.subscribe = exports.emitEvent = exports.readMessageAtPosition = exports.readLastMessage = exports.retrieveServices = exports.getService = exports.registerService = exports.sendCommand = exports.publish = void 0;
var grpc_js_1 = require("@grpc/grpc-js");
var utils_1 = require("./utils");
var port = (_a = process.env.PORT) !== null && _a !== void 0 ? _a : "8080";
var host = (_b = process.env.HOST) !== null && _b !== void 0 ? _b : "0.0.0.0:" + port;
var client = new grpc_js_1.Client(host, grpc_js_1.credentials.createInsecure());
function promisify() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return new Promise(function (resolve, reject) {
        var a = args[0], b = args[1], c = args[2], d = args[3];
        var callback = function (err, res) {
            return err != null ? reject(err) : resolve(res);
        };
        client.makeUnaryRequest(a, b, c, d, callback);
    });
}
function publish(options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/Publish", utils_1.serialize, utils_1.deserialize, options).then(function (res) { return ({
                    streamName: res.stream_name,
                    globalPosition: res.global_position,
                    time: res.time,
                    position: res.position
                }); })];
        });
    });
}
exports.publish = publish;
function sendCommand(options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/SendCommand", utils_1.serialize, utils_1.deserialize, options).then(function (res) { return ({
                    streamName: res.stream_name,
                    globalPosition: res.global_position,
                    time: res.time,
                    position: res.position
                }); })];
        });
    });
}
exports.sendCommand = sendCommand;
function registerService(service) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/RegisterService", utils_1.serialize, utils_1.deserialize, service)];
        });
    });
}
exports.registerService = registerService;
function getService(name) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/GetService", utils_1.serialize, utils_1.deserialize, {
                    name: name
                })];
        });
    });
}
exports.getService = getService;
function retrieveServices() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/RetrieveServices", utils_1.serialize, utils_1.deserialize, {})];
        });
    });
}
exports.retrieveServices = retrieveServices;
function readLastMessage(options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/ReadLastMessage", utils_1.serialize, utils_1.deserialize, options)];
        });
    });
}
exports.readLastMessage = readLastMessage;
function readMessageAtPosition(options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/ReadMessageAtPosition", utils_1.serialize, utils_1.deserialize, options)];
        });
    });
}
exports.readMessageAtPosition = readMessageAtPosition;
function emitEvent(options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, promisify("/MessageStore/EmitEvent", utils_1.serialize, utils_1.deserialize, options).then(function (res) { return ({
                    streamName: res.stream_name,
                    globalPosition: res.global_position,
                    time: res.time,
                    position: res.position
                }); })];
        });
    });
}
exports.emitEvent = emitEvent;
function subscribe(options, handler, context) {
    var _a;
    var subscriberId = (_a = options.subscriberId) !== null && _a !== void 0 ? _a : uuid_1.v4();
    var count = 0;
    console.log("Subscribe", subscriberId, options);
    var stream = client.makeServerStreamRequest("/MessageStore/Subscribe", utils_1.serialize, utils_1.deserialize, options);
    var promise = Promise.resolve();
    stream.on("data", function (msg) {
        var _a;
        // If its' the keep alive.
        if ("ok" in msg) {
            var date = new Date((_a = msg.time) !== null && _a !== void 0 ? _a : new Date().valueOf());
            options.onKeepAlive != null && options.onKeepAlive(subscriberId, date);
            return;
        }
        count++;
        // Update the stats.
        options.onStatsUpdated != null &&
            options.onStatsUpdated(subscriberId, { count: count });
        promise = promise
            .then(function () {
            var maybePromise = handler(msg, context);
            if ("then" in maybePromise) {
                return maybePromise;
            }
            else {
                return Promise.resolve();
            }
        })["catch"](function (err) {
            console.error("Catched an error in a subscriber, enabling fail safe...");
            console.error(err);
            return Promise.resolve();
        });
    });
    return function () {
        stream.on("error", function () { return null; });
        stream.cancel();
    };
}
exports.subscribe = subscribe;
function combineSubscriber() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    return function () {
        args.forEach(function (close) { return close(); });
    };
}
exports.combineSubscriber = combineSubscriber;
function runProjector(options, reducer, initialValue) {
    return __awaiter(this, void 0, void 0, function () {
        var stream;
        return __generator(this, function (_a) {
            stream = client.makeServerStreamRequest("/MessageStore/RunProjector", utils_1.serialize, utils_1.deserialize, options);
            // Return a new promise, that will be resolved once the END cmd is received,
            // with the reduced value.
            return [2 /*return*/, new Promise(function (resolve) {
                    var value = initialValue;
                    stream.on("data", function (msg) {
                        if ("_cmd" in msg) {
                            resolve(value);
                        }
                        else {
                            value = reducer(value, msg);
                        }
                    });
                })];
        });
    });
}
exports.runProjector = runProjector;
var testUtils = __importStar(require("./test_utils"));
exports.testUtils = testUtils;
var uuid_1 = require("uuid");
var definition_1 = require("./definition");
__createBinding(exports, definition_1, "getTypescriptDefinition");
var endpoint_1 = require("./endpoint");
__createBinding(exports, endpoint_1, "createEndpoint");

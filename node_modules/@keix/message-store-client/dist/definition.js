"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
exports.__esModule = true;
exports.getTypescriptDefinition = void 0;
var json_schema_to_typescript_1 = require("json-schema-to-typescript");
var lodash_1 = require("lodash");
var pascalCase = function (str) { return lodash_1.upperFirst(lodash_1.camelCase(str)); };
var pascalCaseJoin = function () {
    var str = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        str[_i] = arguments[_i];
    }
    return lodash_1.upperFirst(lodash_1.camelCase(str.join("_")));
};
function map(vals, fn) {
    return vals.map(function (val, index, total) {
        return fn(val, index < total.length - 1);
    });
}
function generateTypescriptFromCommandsOrEvents(name, values, suffix) {
    return __awaiter(this, void 0, void 0, function () {
        var types, space, enumTypes, options, payloads, commands, commandTypes, commandType;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (lodash_1.isEmpty(values)) {
                        return [2 /*return*/, ""];
                    }
                    types = values.map(function (c) { return c.name; });
                    space = "";
                    enumTypes = __spreadArrays([
                        "export enum " + pascalCaseJoin(name, suffix, "type") + " {"
                    ], map(types, function (t, last) { return "  " + t + " = \"" + t + "\"" + (last ? "," : ""); }), [
                        "}",
                    ]).join("\n");
                    options = { bannerComment: "" };
                    return [4 /*yield*/, json_schema_to_typescript_1.compile({
                            allOf: values.map(function (_a) {
                                var payload = _a.payload, name = _a.name, description = _a.description;
                                return (__assign(__assign({}, payload), { description: description, additionalProperties: false, id: "" + pascalCaseJoin(name, "data") }));
                            })
                        }, pascalCaseJoin(suffix, "payload"), options)];
                case 1:
                    payloads = _a.sent();
                    commands = values.map(function (_a) {
                        var n = _a.name;
                        var nameFn = function () {
                            var suffix = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                suffix[_i] = arguments[_i];
                            }
                            return pascalCaseJoin.apply(void 0, __spreadArrays([n], suffix));
                        };
                        return "export type " + nameFn(suffix) + " = Message<" + pascalCaseJoin(name, suffix, "type") + "." + n + ", " + nameFn("data") + ">;";
                    });
                    commandTypes = values
                        .map(function (_a) {
                        var name = _a.name;
                        return pascalCaseJoin(name, suffix);
                    })
                        .join(" | ");
                    commandType = "export type " + pascalCaseJoin(suffix) + " = " + commandTypes + ";";
                    return [2 /*return*/, __spreadArrays([enumTypes, space, payloads], commands, [space, commandType]).join("\n")];
            }
        });
    });
}
function getTypescriptDefinition(definition) {
    return __awaiter(this, void 0, void 0, function () {
        var importType, space, commands, events;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    importType = "import type { Message } from '@keix/message-store-client';";
                    space = "";
                    return [4 /*yield*/, generateTypescriptFromCommandsOrEvents(definition.name, definition.commands, "command")];
                case 1:
                    commands = _a.sent();
                    return [4 /*yield*/, generateTypescriptFromCommandsOrEvents(definition.name, definition.events, "event")];
                case 2:
                    events = _a.sent();
                    return [2 /*return*/, [importType, space, commands, events].join("\n")];
            }
        });
    });
}
exports.getTypescriptDefinition = getTypescriptDefinition;

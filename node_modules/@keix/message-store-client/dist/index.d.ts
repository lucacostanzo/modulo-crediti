import { SendCommandOptions, EmitEventOptions, ReadLastMessageOptions, SubscriberOptions, Message, Handler, EventDefinition, CommandDefinition, ProjectorOptions, Projector, PublishResponse, BaseMetadata, ServiceDefinition, ReadMessageAtPositionOptions, PublishOptions } from "./types";
export declare function publish<Data = {}, Metadata extends BaseMetadata = BaseMetadata>(options: PublishOptions<Data, Metadata>): Promise<PublishResponse>;
export declare function sendCommand<Data = {}, Metadata extends BaseMetadata = BaseMetadata>(options: SendCommandOptions<Data, Metadata>): Promise<PublishResponse>;
export declare function registerService(service: ServiceDefinition): Promise<boolean>;
export declare function getService(name: string): Promise<boolean>;
export declare function retrieveServices(): Promise<boolean>;
export declare function readLastMessage<T = Message>(options: ReadLastMessageOptions): Promise<T>;
export declare function readMessageAtPosition<T = Message>(options: ReadMessageAtPositionOptions): Promise<T>;
export declare function emitEvent<Data = {}, Metadata extends BaseMetadata = BaseMetadata>(options: EmitEventOptions<Data, Metadata>): Promise<PublishResponse>;
export declare function subscribe<T, Ctx>(options: SubscriberOptions, handler: Handler<T, Ctx>, context?: Ctx): () => void;
export declare function combineSubscriber(...args: (() => void)[]): () => void;
export declare function runProjector<State, Message>(options: ProjectorOptions, reducer: Projector<State, Message>, initialValue: State): Promise<State>;
import * as testUtils from "./test_utils";
export { Message, ServiceDefinition, EventDefinition, CommandDefinition };
export { testUtils };
export { getTypescriptDefinition } from "./definition";
export { createEndpoint } from "./endpoint";
